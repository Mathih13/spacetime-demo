// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit 111ff87aad977af89168b6ac4815bc39372eb9f9).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateShape } from "./create_shape_reducer.ts";
export { CreateShape };
import { DeleteShape } from "./delete_shape_reducer.ts";
export { DeleteShape };
import { MoveShape } from "./move_shape_reducer.ts";
export { MoveShape };
import { SetUserName } from "./set_user_name_reducer.ts";
export { SetUserName };
import { UpdateCursor } from "./update_cursor_reducer.ts";
export { UpdateCursor };
import { UpdateShape } from "./update_shape_reducer.ts";
export { UpdateShape };

// Import and reexport all table handle types
import { ShapeTableHandle } from "./shape_table.ts";
export { ShapeTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Shape } from "./shape_type.ts";
export { Shape };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    shape: {
      tableName: "shape",
      rowType: Shape.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Shape.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CreateShape: {
      reducerName: "CreateShape",
      argsType: CreateShape.getTypeScriptAlgebraicType(),
    },
    DeleteShape: {
      reducerName: "DeleteShape",
      argsType: DeleteShape.getTypeScriptAlgebraicType(),
    },
    MoveShape: {
      reducerName: "MoveShape",
      argsType: MoveShape.getTypeScriptAlgebraicType(),
    },
    SetUserName: {
      reducerName: "SetUserName",
      argsType: SetUserName.getTypeScriptAlgebraicType(),
    },
    UpdateCursor: {
      reducerName: "UpdateCursor",
      argsType: UpdateCursor.getTypeScriptAlgebraicType(),
    },
    UpdateShape: {
      reducerName: "UpdateShape",
      argsType: UpdateShape.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.4.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateShape", args: CreateShape }
| { name: "DeleteShape", args: DeleteShape }
| { name: "MoveShape", args: MoveShape }
| { name: "SetUserName", args: SetUserName }
| { name: "UpdateCursor", args: UpdateCursor }
| { name: "UpdateShape", args: UpdateShape }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  createShape(type: string, x: number, y: number, width: number, height: number, color: string) {
    const __args = { type, x, y, width, height, color };
    let __writer = new __BinaryWriter(1024);
    CreateShape.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateShape", __argsBuffer, this.setCallReducerFlags.createShapeFlags);
  }

  onCreateShape(callback: (ctx: ReducerEventContext, type: string, x: number, y: number, width: number, height: number, color: string) => void) {
    this.connection.onReducer("CreateShape", callback);
  }

  removeOnCreateShape(callback: (ctx: ReducerEventContext, type: string, x: number, y: number, width: number, height: number, color: string) => void) {
    this.connection.offReducer("CreateShape", callback);
  }

  deleteShape(shapeId: number) {
    const __args = { shapeId };
    let __writer = new __BinaryWriter(1024);
    DeleteShape.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteShape", __argsBuffer, this.setCallReducerFlags.deleteShapeFlags);
  }

  onDeleteShape(callback: (ctx: ReducerEventContext, shapeId: number) => void) {
    this.connection.onReducer("DeleteShape", callback);
  }

  removeOnDeleteShape(callback: (ctx: ReducerEventContext, shapeId: number) => void) {
    this.connection.offReducer("DeleteShape", callback);
  }

  moveShape(shapeId: number, newX: number, newY: number) {
    const __args = { shapeId, newX, newY };
    let __writer = new __BinaryWriter(1024);
    MoveShape.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("MoveShape", __argsBuffer, this.setCallReducerFlags.moveShapeFlags);
  }

  onMoveShape(callback: (ctx: ReducerEventContext, shapeId: number, newX: number, newY: number) => void) {
    this.connection.onReducer("MoveShape", callback);
  }

  removeOnMoveShape(callback: (ctx: ReducerEventContext, shapeId: number, newX: number, newY: number) => void) {
    this.connection.offReducer("MoveShape", callback);
  }

  setUserName(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    SetUserName.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetUserName", __argsBuffer, this.setCallReducerFlags.setUserNameFlags);
  }

  onSetUserName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("SetUserName", callback);
  }

  removeOnSetUserName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("SetUserName", callback);
  }

  updateCursor(x: number, y: number) {
    const __args = { x, y };
    let __writer = new __BinaryWriter(1024);
    UpdateCursor.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateCursor", __argsBuffer, this.setCallReducerFlags.updateCursorFlags);
  }

  onUpdateCursor(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("UpdateCursor", callback);
  }

  removeOnUpdateCursor(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("UpdateCursor", callback);
  }

  updateShape(shapeId: number, width: number | undefined, height: number | undefined, color: string | undefined, rotation: number | undefined) {
    const __args = { shapeId, width, height, color, rotation };
    let __writer = new __BinaryWriter(1024);
    UpdateShape.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateShape", __argsBuffer, this.setCallReducerFlags.updateShapeFlags);
  }

  onUpdateShape(callback: (ctx: ReducerEventContext, shapeId: number, width: number | undefined, height: number | undefined, color: string | undefined, rotation: number | undefined) => void) {
    this.connection.onReducer("UpdateShape", callback);
  }

  removeOnUpdateShape(callback: (ctx: ReducerEventContext, shapeId: number, width: number | undefined, height: number | undefined, color: string | undefined, rotation: number | undefined) => void) {
    this.connection.offReducer("UpdateShape", callback);
  }

}

export class SetReducerFlags {
  createShapeFlags: __CallReducerFlags = 'FullUpdate';
  createShape(flags: __CallReducerFlags) {
    this.createShapeFlags = flags;
  }

  deleteShapeFlags: __CallReducerFlags = 'FullUpdate';
  deleteShape(flags: __CallReducerFlags) {
    this.deleteShapeFlags = flags;
  }

  moveShapeFlags: __CallReducerFlags = 'FullUpdate';
  moveShape(flags: __CallReducerFlags) {
    this.moveShapeFlags = flags;
  }

  setUserNameFlags: __CallReducerFlags = 'FullUpdate';
  setUserName(flags: __CallReducerFlags) {
    this.setUserNameFlags = flags;
  }

  updateCursorFlags: __CallReducerFlags = 'FullUpdate';
  updateCursor(flags: __CallReducerFlags) {
    this.updateCursorFlags = flags;
  }

  updateShapeFlags: __CallReducerFlags = 'FullUpdate';
  updateShape(flags: __CallReducerFlags) {
    this.updateShapeFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get shape(): ShapeTableHandle {
    // clientCache is a private property
    return new ShapeTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Shape>(REMOTE_MODULE.tables.shape));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
